name: bluebell - Generate Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (ex: v0.2.0)'
        required: true

jobs:
  release:
    runs-on: ubuntu-22.04

    steps:
      - name: "[bluebell] - Checkout Repo"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "[bluebell] - Determine Version and Environment"
        id: vars
        run: |
          VERSION=${{ github.event.inputs.version || github.ref_name }}
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          VERSION_LOWER=$(echo "$VERSION" | tr '[:upper:]' '[:lower:]')
          
          if [[ "$VERSION" =~ -dev$ ]]; then
            ENV=dev
            UPPER_ENV=DEV
          elif [[ "$VERSION" =~ -staging$ ]]; then
            ENV=staging
            UPPER_ENV=STAGING
          else
            ENV=prod
            UPPER_ENV=PROD
          fi

          echo "HERE"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "REPO_LOWER=$REPO_LOWER" >> $GITHUB_ENV
          echo "VERSION_LOWER=$VERSION_LOWER" >> $GITHUB_ENV
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "UPPER_ENV=$UPPER_ENV" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: "[bluebell] - Generate .env"
        run: |
          case "${{ env.UPPER_ENV }}" in
            PROD)
              GH_URL="${{ secrets.GREENHOUSE_HEALTHCHECK_URL_PROD }}"
              ;;
            DEV)
              GH_URL="${{ secrets.GREENHOUSE_HEALTHCHECK_URL_DEV }}"
              ;;
            STAGING)
              GH_URL="${{ secrets.GREENHOUSE_HEALTHCHECK_URL_STAGING }}"
              ;;
            *)
              echo "Unknown env $UPPER_ENV"
              exit 1
              ;;
          esac
          
          echo "SPRING_PROFILE=${{ env.ENV }}" > .env
          echo "GREENHOUSE_HEALTHCHECK_URL=${GH_URL}" >> .env
          echo "FLOWER_PROFILE=${{ env.ENV }}" >> .env

      - name: "[bluebell] - Run docker-ci.sh to build images"
        run: ./docker-ci.sh ${{ env.ENV }}

      - name: "[bluebell] - Log in to GitHub Container Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "[bluebell] - Tag and Push Docker Images"
        run: |
          IMAGE_NAME=ghcr.io/${{ env.REPO_LOWER }}/bluebell
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ env.VERSION_LOWER }}
          docker push $IMAGE_NAME:${{ env.VERSION_LOWER }}
          docker push $IMAGE_NAME:latest

      - name: "[bluebell] - Create GitHub Release"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: bluebell ${{ env.VERSION }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "[bluebell] - Create GitHub Discussion"
        run: |
          curl -X POST https://api.github.com/repos/${{ github.repository }}/discussions \
            -H "Authorization: Bearer ${{ secrets.GH_PAT_DISCUSSIONS }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "title": "ðŸŽ‰ Release ${{ env.VERSION }} is live!",
              "body": "Check out the [release notes](https://github.com/${{ github.repository }}/releases/tag/${{ env.VERSION }}) for full details.\n\nLet us know your thoughts below ðŸ‘‡",
              "category_id": "${{ secrets.GH_PAT_DISCUSSIONS_TARGET_ID }}"
            }'
