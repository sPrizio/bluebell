package com.bluebell.radicle.importing.services.trade.csv;

import com.bluebell.platform.models.core.entities.account.Account;
import com.bluebell.radicle.importing.exceptions.TradeImportFailureException;
import com.bluebell.radicle.importing.models.wrapper.trade.FTMOTradeWrapper;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.util.ResourceUtils;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;

/**
 * Service-layer for importing trades into the system from a .csv file generated by FTMO
 *
 * @author Stephen Prizio
 * @version 0.1.8
 */
@Slf4j
@Service("ftmoCSVTradeImportService")
public class FTMOCsvTradeImportService extends AbstractCsvTradeImportService {


    //  METHODS

    /**
     * Imports trades from a CSV file from the MT4 platform
     *
     * @param filePath  file path
     * @param delimiter unit delimiter
     */
    @Override
    public void importTrades(final String filePath, final Character delimiter, final Account account) {
        try {
            importFile(new BufferedReader(new FileReader(ResourceUtils.getFile(filePath))), account);
        } catch (Exception e) {
            LOGGER.error("The import process failed with reason : {}", e.getMessage(), e);
            throw new TradeImportFailureException(String.format("The import process failed with reason : %s", e.getMessage()), e);
        }
    }

    /**
     * Imports trades from a CSV file from the MT4 platform
     *
     * @param inputStream {@link InputStream}
     * @param delimiter   unit delimiter
     */
    @Override
    public void importTrades(final InputStream inputStream, final Character delimiter, final Account account) {
        importFile(new BufferedReader(new InputStreamReader(inputStream)), account);
    }


    //  HELPERS

    /**
     * Imports a file using the given {@link BufferedReader} and delimiter
     *
     * @param bufferedReader {@link BufferedReader}
     */
    private void importFile(final BufferedReader bufferedReader, final Account account) {

        try (bufferedReader) {
            final List<FTMOTradeWrapper> trades =
                    bufferedReader.lines()
                            .skip(1)
                            .map(this::generateWrapper)
                            .filter(Objects::nonNull)
                            .sorted(Comparator.comparing(FTMOTradeWrapper::getOpenTime))
                            .toList();

            ftmoTradeCleanup(account, trades);
        } catch (Exception e) {
            LOGGER.error("The import process failed with reason : {}", e.getMessage(), e);
            throw new TradeImportFailureException(String.format("The import process failed with reason : %s", e.getMessage()), e);
        }
    }

    /**
     * Generates a {@link FTMOTradeWrapper} from the given string
     *
     * @param string input value
     * @return {@link FTMOTradeWrapper}
     */
    private FTMOTradeWrapper generateWrapper(final String string) {

        if (StringUtils.isEmpty(string)) {
            return null;
        }

        final List<String> data = parseCsvTrade(string);
        if (data.size() != 15) {
            return null;
        }

        return FTMOTradeWrapper
                .builder()
                .ticketNumber(data.get(0))
                .openTime(LocalDateTime.parse(data.get(1).replace("\"", StringUtils.EMPTY), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))
                .closeTime(LocalDateTime.parse(data.get(8).replace("\"", StringUtils.EMPTY), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))
                .type(data.get(2))
                .size(Double.parseDouble(data.get(3)))
                .item(data.get(4))
                .openPrice(Double.parseDouble(data.get(5)))
                .stopLoss(Double.parseDouble(data.get(6)))
                .takeProfit(Double.parseDouble(data.get(7)))
                .closePrice(Double.parseDouble(data.get(9)))
                .profit(Double.parseDouble(data.get(12).replace(" ", StringUtils.EMPTY).replace(",", StringUtils.EMPTY).trim()))
                .build();
    }
}
